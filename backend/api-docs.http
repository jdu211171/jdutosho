@baseUrl = http://localhost:8000/api
@token = 3|o6IWPxsLBUkXy2uOWwE3fWxaqGcDkXDZcs7FngYjf98bdcbb
@rentId = 1
@userId = 1
@id = 1
@hash = 1234567890abcdef


### Register
POST {{baseUrl}}/auth/register
Content-Type: application/json
Accept: application/json

{
    "username": "newuser",
    "full_name": "User Name",
    "email": "user@gmail.com",
    "password": "nopassword",
    "password_confirmation": "nopassword"
}

### Login
POST {{baseUrl}}/auth/login
Content-Type: application/json
Accept: application/json

{
    "email": "student@example.com",
    "password": "password"
}

### Google Login
GET {{baseUrl}}/auth/redirect/google

### Logout
POST {{baseUrl}}/auth/logout
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{token}}

### Forgot Password (Not Working)
POST {{baseUrl}}/auth/forgot-password
Content-Type: application/json
Accept: application/json

{
    "email": "user@gmail.com"
}

### Reset Password (Not Working)
POST {{baseUrl}}/auth/reset-password
Content-Type: application/json
Accept: application/json

{
    "token": "reset-token",
    "email": "user@gmail.com",
    "password": "newpassword",
    "password_confirmation": "newpassword"
}

### Email Verification Notification (Not Working)
POST {{baseUrl}}/auth/email/verification-notification
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{token}}

### Verify Email (Not Working)
GET {{baseUrl}}/auth/email/verify/{{id}}/{{hash}}
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{token}}

### Change Password
POST {{baseUrl}}/auth/change-password
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{token}}

{
    "current_password": "nopassword",
    "new_password": "newestpassword",
    "new_password_confirmation": "newestpassword"
}

### Google Change Password (First Time)
POST {{baseUrl}}/auth/change-password
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{token}}

{
    "new_password": "MyNewSecurePassword",
    "new_password_confirmation": "MyNewSecurePassword"
}

### Google Change Password (Subsequent Times)
POST {{baseUrl}}/auth/change-password
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{token}}

{
    "current_password": "MyNewSecurePassword",
    "new_password": "MyAnotherSecurePassword",
    "new_password_confirmation": "MyAnotherSecurePassword"
}

### Change Password (Invalid Password Length)
POST {{baseUrl}}/auth/change-password
Authorization: Bearer {{token}}

{
    "current_password": "nopassword",
    "new_password": "short",
    "new_password_confirmation": "short"
}
# Expected: 422, "new_password": "The new password must be at least 8 characters."

### Change Password (Mismatched Confirmation)
POST {{baseUrl}}/auth/change-password
Authorization: Bearer {{token}}

{
    "current_password": "nopassword",
    "new_password": "newpassword123",
    "new_password_confirmation": "different123"
}
# Expected: 422, "new_password_confirmation": "The new password confirmation does not match."

### Get All Users
GET {{baseUrl}}/users
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{token}}

### Get Single User
GET {{baseUrl}}/users/{{userId}}
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{token}}

### Create User
POST {{baseUrl}}/users
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{token}}

{
    "username": "john.doe",
    "full_name": "John Doe",
    "email": "john.doe@example.com",
    "password": "password123",
    "password_confirmation": "password123",
    "role": "admin"
}

### Update User
PUT {{baseUrl}}/users/{{userId}}
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{token}}

{
    "username": "john.doe2",
    "full_name": "John Doe Updated",
    "email": "john.doe2@example.com",
    "password": "newpassword123",
    "password_confirmation": "newpassword123",
    "role": "student"
}

### Delete User
DELETE {{baseUrl}}/users/{{userId}}
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{token}}

# -----------------------
# |                     |
# | Book Categories     |
# |                     |
# -----------------------

### Get All Book Categories (Paginated)
GET {{baseUrl}}/book-categories
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{token}}

### Get All Book Categories (List)
GET {{baseUrl}}/book-categories/list
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{token}}

### Create Book Category
POST {{baseUrl}}/book-categories
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{token}}

{
    "name": "Category"
}

### Search Book Categories
GET {{baseUrl}}/book-categories/search?query=Category
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{token}}

### Get Single Book Category
GET {{baseUrl}}/book-categories/{{id}}
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{token}}

### Update Book Category
PUT {{baseUrl}}/book-categories/{{id}}
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{token}}

{
    "name": "Updated Category Name"
}

### Delete Book Category
DELETE {{baseUrl}}/book-categories/{{id}}
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{token}}

### Create Book Category (Invalid - Empty Name)
POST {{baseUrl}}/book-categories
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{token}}
# Expected: 422 Unprocessable Entity, validation error for "name"

{
    "name": ""
}

### Update Non-Existent Book Category
PUT {{baseUrl}}/book-categories/9999
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{token}}
# Expected: 404 Not Found, "message": "Book category not found"

{
    "name": "Should Fail"
}

### Delete Non-Existent Book Category
DELETE {{baseUrl}}/book-categories/9999
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{token}}
# Expected: 404 Not Found, "message": "Book category not found"

# -----------------------
# |                     |
# | Books               |
# |                     |
# -----------------------

### Get All Books (Paginated)
GET {{baseUrl}}/books
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{token}}

### Get Books with Search
GET {{baseUrl}}/books?search=programming
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{token}}

### Get Books by Language
GET {{baseUrl}}/books?language=en
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{token}}

### Get Books by Category
GET {{baseUrl}}/books?category=1
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{token}}

### Get Books by Author
GET {{baseUrl}}/books?author=John
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{token}}

### Get Available Books Only
GET {{baseUrl}}/books?available=true
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{token}}

### Get Unavailable Books Only
GET {{baseUrl}}/books?available=false
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{token}}

### Get Books with Custom Pagination
GET {{baseUrl}}/books?per_page=5&page=2
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{token}}

### Get Books with Combined Filters
GET {{baseUrl}}/books?search=programming&language=en&available=true&per_page=10
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{token}}

### Get Available Book Codes
GET {{baseUrl}}/books/available-codes
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{token}}

### Get Book Codes (Advanced Search)
GET {{baseUrl}}/books/codes
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{token}}

### Get Book Codes with Search and Status Filter
GET {{baseUrl}}/books/codes?search=example&status=exist
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{token}}

### Create Book
POST {{baseUrl}}/books
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{token}}

{
    "name": "New Book",
    "author": "Author Name",
    "language": "uz",
    "category": 1,
    "codes": [
        "CODE001",
        "CODE002"
    ]
}

### Get Single Book
GET {{baseUrl}}/books/{{id}}
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{token}}

### Update Book
PUT {{baseUrl}}/books/{{id}}
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{token}}

{
    "name": "Updated Book Name",
    "author": "Updated Author",
    "language": "en",
    "category": 1
}

### Update Book Codes
PUT {{baseUrl}}/books/{{id}}/code
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{token}}

{
    "codes": [
        "CODE001",
        "CODE003"
    ]
}

### Delete Book
DELETE {{baseUrl}}/books/{{id}}
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{token}}

### Create Book (Invalid - Missing Fields)
POST {{baseUrl}}/books
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{token}}
# Expected: 422 Unprocessable Entity, validation errors for required fields

{
    "name": "",
    "author": "",
    "language": "",
    "category": "",
    "codes": []
}

### Update Non-Existent Book
PUT {{baseUrl}}/books/9999
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{token}}
# Expected: 404 Not Found, "message": "Book not found"

{
    "name": "Should Fail",
    "author": "Author",
    "language": "uz",
    "category": 1
}

### Delete Non-Existent Book
DELETE {{baseUrl}}/books/9999
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{token}}
# Expected: 404 Not Found, "message": "Book not found"

# -----------------------
# |                     |
# | Users               |
# |                     |
# -----------------------

### Get All Users (Paginated)
GET {{baseUrl}}/users
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{token}}

### Get Single User
GET {{baseUrl}}/users/{{userId}}
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{token}}

### Create User
POST {{baseUrl}}/users
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{token}}

{
    "username": "john.doe",
    "full_name": "John Doe",
    "email": "john.doe@example.com",
    "password": "password123",
    "password_confirmation": "password123",
    "role": "admin"
}

### Update User
PUT {{baseUrl}}/users/{{userId}}
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{token}}

{
    "username": "john.doe2",
    "full_name": "John Doe Updated",
    "email": "john.doe2@example.com",
    "password": "newpassword123",
    "password_confirmation": "newpassword123",
    "role": "student"
}

### Delete User
DELETE {{baseUrl}}/users/{{userId}}
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{token}}

### Create User (Invalid - Missing Fields)
POST {{baseUrl}}/users
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{token}}
# Expected: 422 Unprocessable Entity, validation errors for required fields

{
    "username": "",
    "full_name": "",
    "email": "",
    "password": "",
    "password_confirmation": "",
    "role": ""
}

### Update Non-Existent User
PUT {{baseUrl}}/users/9999
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{token}}
# Expected: 404 Not Found, "message": "User not found"

{
    "username": "should.fail",
    "full_name": "Fail",
    "email": "fail@example.com",
    "password": "fail123",
    "password_confirmation": "fail123",
    "role": "student"
}

### Delete Non-Existent User
DELETE {{baseUrl}}/users/9999
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{token}}
# Expected: 404 Not Found, "message": "User not found"

# -----------------------
# |                     |
# | Rents               |
# |                     |
# -----------------------

### Get All Current Rents (Paginated)
GET {{baseUrl}}/rents
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{token}}
# Expected: 200 OK, paginated list of rents with null return_date and status 'rent'

### Create Rent (Successful)
POST {{baseUrl}}/rents
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{token}}
# Expected: 201 Created, returns rent details
# Note: Ensure 'CODE001' exists with status 'exist' and 'student123' is a student's loginID

{
    "book_code": "CODE001",
    "login_id": "student123"
}

### Create Rent (Invalid - Non-Student User)
POST {{baseUrl}}/rents
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{token}}
# Expected: 400 Bad Request, "message": "Only student can rent a book"
# Note: Assumes 'admin123' is a non-student loginID

{
    "book_code": "CODE001",
    "login_id": "admin123"
}

### Create Rent (Invalid - Book Already Rented)
POST {{baseUrl}}/rents
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{token}}
# Expected: 400 Bad Request, "message": "Book is already rented"
# Note: Assumes 'CODE002' has status 'rent' or other non-'exist' status

{
    "book_code": "CODE002",
    "login_id": "student123"
}

### Create Rent (Invalid - Student Has 3 Rents)
POST {{baseUrl}}/rents
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{token}}
# Expected: 400 Bad Request, "message": "Student can only rent 3 books"
# Note: Assumes 'student123' already has 3 active rents

{
    "book_code": "CODE003",
    "login_id": "student123"
}

### Get Pending Rents (Paginated)
GET {{baseUrl}}/rents/pending
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{token}}
# Expected: 200 OK, paginated list of rents with null return_date and status 'pending'

### Get Pending Rents with Filters
GET {{baseUrl}}/rents/pending?book_code=CODE001&login_id=student123
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{token}}
# Expected: 200 OK, filtered paginated list of pending rents

### Accept Rent (Successful)
PUT {{baseUrl}}/rents/{{rentId}}/accept
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{token}}
# Expected: 200 OK, updated rent with return_date set and book_code status 'exist'
# Note: Replace {{rentId}} with a valid rent ID where book_code.status is 'pending'

### Accept Rent (Invalid - Non-Existing Rent)
PUT {{baseUrl}}/rents/9999/accept
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{token}}
# Expected: 404 Not Found, "message": "Rent not found"

### Accept Rent (Invalid - Not Pending)
PUT {{baseUrl}}/rents/{{rentId}}/accept
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{token}}
# Expected: 400 Bad Request, "message": "This book can't be accepted"
# Note: Replace {{rentId}} with a valid rent ID where book_code.status is not 'pending'

# -----------------------
# |                      |
# | Librarian Dashboard  |
# |                      |
# -----------------------

### Get Librarian Dashboard Stats
GET {{baseUrl}}/librarian/dashboard
Accept: application/json
Authorization: Bearer {{token}}
# Expected: 200 OK
# Response structure:
#{
#    "data": {
#        "totalBooks": <integer>,      // Total number of book codes (copies)
#        "activeStudents": <integer>,  // Count of distinct students with active rentals
#        "totalRents": <integer>,      // Total number of rent records ever created
#        "averageRentDays": <integer> // Average days for completed rentals (rounded)
#    }
#}

# -----------------------
# |                     |
# | Student             |
# |                     |
# -----------------------

### Get Student's Rents
GET {{baseUrl}}/student/rents
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{token}}

### Get Available Books (with search)
GET {{baseUrl}}/student/books?search=example
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{token}}

### Get Available Books (no search)
GET {{baseUrl}}/student/books
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{token}}

### Get Student Dashboard Stats
GET {{baseUrl}}/student/dashboard
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{token}}
# Expected: 200 OK
# Response structure:
#{
#    "data": {
#        "totalBorrowed": <integer>,   // Currently borrowed books
#        "availableBooks": <integer>,  // Total books in the library
#        "rentHistory": <integer>,     // Total books borrowed by student (history)
#        "averageRentDays": <integer>  // Average rental duration in days
#    }
#}

### Get Student Dashboard Stats (Invalid Role)
GET {{baseUrl}}/student/dashboard
Accept: application/json
Authorization: Bearer {{token}}
# Expected: 403, "message": "User does not have the right roles."

### Return Book (Request Return)
PUT {{baseUrl}}/student/{{rentId}}/return
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{token}}
# Expected: 200 OK, book status changes to 'pending'

### Return Book (Valid)
PUT {{baseUrl}}/student/{{rentId}}/return
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{token}}
// Expected: 200 OK, book status changes to 'pending'

### Return Book (Non-existent Rent)
PUT {{baseUrl}}/student/9999/return
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{token}}
# Expected: 404 Not Found, "message": "Rent not found"

### Return Book (Already Returned)
PUT {{baseUrl}}/student/{{rentId}}/return
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{token}}
# Expected: 404 Not Found, "message": "Rent not found"
# Note: Use a rent ID that's already returned or belongs to another student

### Get Student's Rents
GET {{baseUrl}}/student/rents
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{token}}

### Get Available Books (with search)
GET {{baseUrl}}/student/books?search=example
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{token}}

### Get Available Books (no search)
GET {{baseUrl}}/student/books
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{token}}

### Get Student Books (with pagination)
GET {{baseUrl}}/student/books?page=1&per_page=5
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{token}}


